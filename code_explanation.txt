PASSWORD MANAGER APPLICATION - CODE EXPLANATION
============================================

1. MAIN APPLICATION STRUCTURE (main.py)
-------------------------------------
The application is built using Tkinter for the GUI and MongoDB for data storage.

Key Components:
- PasswordManager class: Main application class
- Database class: Handles all database operations
- GUI Components: Windows, frames, buttons, and input fields

2. DATABASE OPERATIONS (database.py)
----------------------------------
The Database class handles all interactions with MongoDB:

a) Initialization:
- Connects to MongoDB using environment variables
- Creates necessary collections (users, app_passwords, web_passwords)
- Sets up unique indexes to prevent duplicates
- Creates default admin user if no users exist

b) User Management:
- create_user(): Creates new user with hashed password
- login(): Authenticates users
- get_user_by_username(): Retrieves user by username
- get_user_by_email(): Retrieves user by email

c) Password Management:
- add_app_password(): Stores application passwords
- add_web_password(): Stores website passwords
- get_app_passwords(): Retrieves user's app passwords
- get_web_passwords(): Retrieves user's web passwords
- delete_app_password(): Removes app password
- delete_web_password(): Removes web password

3. USER INTERFACE COMPONENTS
--------------------------
a) Login/Register Page:
- Username and password fields
- Login and register buttons
- Error message display

b) Main Dashboard:
- Welcome message
- Navigation buttons for different features
- User profile access

c) Password Management Pages:
- Add Password: Form to input new passwords
- View Passwords: Displays all stored passwords
- Delete Password: Interface to remove passwords
- Search functionality: Filters passwords

4. SECURITY FEATURES
------------------
a) Password Security:
- Passwords are hashed using bcrypt
- Secure storage in MongoDB
- Input validation for all fields

b) User Authentication:
- Secure login process
- Session management
- Password change functionality

5. KEY FUNCTIONS
--------------
a) Password Management:
- show_add_app_password_page(): Displays form for adding app passwords
- show_add_web_password_page(): Displays form for adding web passwords
- show_view_passwords_page(): Shows all stored passwords
- show_delete_password_page(): Interface for password deletion
- perform_search(): Implements search functionality
- clear_search(): Resets search and refreshes display

b) User Management:
- show_login_page(): Displays login interface
- show_create_account_page(): Shows registration form
- show_profile_page(): Displays user profile
- change_password(): Handles password updates

6. DATA STRUCTURE
---------------
a) User Collection:
{
    username: String (unique),
    email: String (unique),
    password: String (hashed),
    otp: String,
    verified: Boolean
}

b) App Passwords Collection:
{
    user_id: ObjectId,
    app_name: String,
    username: String,
    password: String,
    note: String
}

c) Web Passwords Collection:
{
    user_id: ObjectId,
    web_url: String,
    website_name: String,
    username: String,
    password: String,
    note: String
}

7. ERROR HANDLING
---------------
- Database connection errors
- Duplicate entry prevention
- Input validation
- Authentication failures
- Password validation
- User feedback through message boxes

8. SEARCH FUNCTIONALITY
---------------------
- Real-time search across all password fields
- Case-insensitive matching
- Partial word matching
- Multiple word search support
- Clear search option

9. DELETE FUNCTIONALITY
---------------------
- Select password to delete
- Confirmation dialog
- Success/error messages
- Automatic refresh after deletion
- Secure deletion process

10. USER EXPERIENCE FEATURES
-------------------------
- Clean and intuitive interface
- Responsive design
- Clear error messages
- Confirmation dialogs
- Easy navigation
- Password visibility toggle
- Search and filter options 